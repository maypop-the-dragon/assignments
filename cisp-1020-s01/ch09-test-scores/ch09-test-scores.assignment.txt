Complete #2 and #3 or #2 and #4, Remember to name files descriptively, complete
the Critical Thinking first before coding, upload the Critical Thinking, the
.cpp files, and a picture of the outputs.

2. Test Scores #1
  - Write a program that dynamically allocates an array large enough to hold a
    userdefined number of test scores. Once all the scores are entered, the
    array should be passed to a function that sorts them in ascending order.
    Another function should be called that calculates the average score. The
    program should display the sorted list of scores and averages with
    appropriate headings. Use pointer notation rather than array notation
    whenever possible.
  - Input Validation: Do not accept negative numbers for test scores.
3. Drop Lowest Score
  - Modify Problem 2 above so the lowest test score is dropped. This score
    should not be included in the calculation of the average.
4. Test Scores #2
  - Modify the program of Programming Challenge 2 (Test Scores #1) to allow the
    user to enter name–score pairs. For each student taking a test, the user
    types the student’s name followed by the student’s integer test score.
    Modify the sorting function so it takes an array holding the student names,
    and an array holding the student test scores. When the sorted list of scores
    is displayed, each student’s name should be displayed along with his or her
    score. In stepping through the arrays, use pointers rather than array
    subscripts.
